[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="StreamTexture" id=2]

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 1
texture = SubResource( 2 )

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 0.01

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(SCREEN_UV,0.0);

// Scalar:5
	float n_out5p0;
	n_out5p0 = 0.010000;

// VectorOp:6
	vec3 n_out6p0;
	n_out6p0 = n_out2p0 + vec3(n_out5p0);

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out6p0.xy, 0.0 );
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -346, 85 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 440, 240 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -200, 160 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 200, 240 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -200, 340 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 20, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 6, 0, 5, 0, 6, 1, 6, 0, 4, 0, 4, 0, 0, 0 )

